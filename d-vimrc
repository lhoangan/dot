" ============================================================================
" Current plugins
"
" Declare vim-plug plugins
"
" Add github repository to add a plugin
" Close vimrc and open a random vim session
" Install plugin with " :PlugInstall "
" Check this out: https://medium.com/@huntie/10-essential-vim-plugins-for-2018-39957190b7a9

call plug#begin('~/.vim/plugged')

" vim airline: for status bars and other decoration
" More information at https://github.com/vim-airline/vim-airline
Plug 'bling/vim-bufferline'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Consider https://github.com/itchyny/lightline.vim

" Code syntax checker
Plug 'vim-syntastic/syntastic'

" Code completion, jedi-vim sucks, YouCompleteMe requires too much installation
" Plug 'Valloric/YouCompleteMe'
Plug 'davidhalter/jedi-vim'
" Plug 'Shougo/neocomplete' " this requires vim from 7.4 and built with lua

" LaTeX plugin
" Plug 'lervag/vimtex'

" Jupyter vim
" Plug 'jupyter-vim/jupyter-vim'

" Markdown plugin
" Plug 'gabrielelana/vim-markdown'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'

" Indent line
Plug 'Yggdroot/indentLine'

" Git integration
" Plug 'motemen/git-vim'
Plug 'tpope/vim-fugitive'

" Buffer finders
Plug 'ctrlpvim/ctrlp.vim'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'qpkorr/vim-bufkill'  " kill vim buffer leaving split intact

" Python highlight syntax
Plug 'vim-python/python-syntax'
" Plug 'kh3phr3n/python-syntax'
" Plug 'pfdevilliers/Pretty-Vim-Python'

" Python folding
" Plug 'tmhedberg/SimpylFold' " Produce deadly signal SEGV from time to ttime
" Plug 'Konfekt/FastFold'

" Parentheses and brackets completion
Plug 'jiangmiao/auto-pairs'
" Remap the key since M[eta]- key (Alt) binding is tricky in terminal vim
" https://www.reddit.com/r/vim/comments/818klg/plugin_instructions_say_press_me/dv1anak/
" https://vi.stackexchange.com/questions/2350/how-to-map-alt-key
execute "set <M-e>=\ee"
nnoremap <M-e> e

Plug 'goerz/jupytext.vim'
Plug 'cjrh/vim-conda' " Change conda environment from within vim

" Color also available in my collection
" Check their git pages at github.com/... for more configuration
" Change color scheme instantly with :colorscheme [schemename]
Plug 'NLKNguyen/papercolor-theme'
Plug 'joshdick/onedark.vim'
Plug 'romainl/flattened'
Plug 'nightsense/seabird' " seagull, greygull, petrel, stormpetrel
Plug 'nightsense/vim-colorschemes' " seagull, greygull, petrel, stormpetrel
Plug 'morhetz/gruvbox'

" Finish declearing plugins
call plug#end()

" ============================================================================
" VIMRC settings

set nocompatible              " be iMproved, required
filetype off                  " required
filetype on                   " these 2 seems to be conflict, TODO test
filetype plugin indent on
set t_Co=256
syntax on

" GUI
" color scheme
" colorscheme lucius
" colorscheme vibrantink "darkbackground
" colorscheme fruit
" colorscheme spring
set background=dark
colorscheme PaperColor
" show line numbers
" hybrid mode: absolute for the current, relative for upper and lower lines
set number relativenumber

" turn of relative number when entering insert mode or buffer unfocused
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END


" hight cursor line
set cursorline
" show command in bottom line
set showcmd
" show filename on title bar of console windows
set title
" show status line with information
set laststatus=2
" might not be necessary if having vim-airline
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
" show fullfile name on status line and modified flag
" more information
" http://got-ravings.blogspot.nl/2008/08/vim-pr0n-making-statuslines-that-own.html
set statusline+=%F


" ============================================================================
" Spaces and tabs
set shiftwidth=4
set tabstop=4
set expandtab
set ls=2
set softtabstop=4
set nosmartindent
set autoindent
set listchars=tab:\|.,trail:. "to show tabs as |..., only works for tabs, not spaces
set list
"
" ============================================================================
" Search
set hlsearch
set incsearch
set showmatch
set ruler

" ============================================================================
" Code folding
" zj, zk for jumping up/down from one fold the others
" zM to mask all zR to expand all
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
" May causing vim to crash when creating new line on top
set foldmethod=indent   " set indent fold method for python
nnoremap <space> za
vnoremap <space> zf     " would not work with indent method
" More folding preference https://stackoverflow.com/questions/357785/what-is-the-recommended-way-to-use-vim-folding-for-python-code

" split ----
set splitbelow			" more natural split opening
set splitright			" more natural split opening
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" ----------

nnoremap <F8> :!/opt/local/bin/ctags -R --python-kinds=-i *.py<CR>
nnoremap <Ctrl-1> :TlistToggle<CR>
nnoremap <Ctrl-2> :NERDTreeToggle<CR>
nnoremap gb :ls<CR>:buffer<Space>

" Ctrl-Space is mapped to Ctrl-@ by default in vim
" Now we map them to Ctrl-X+Ctrl-F for file name completion
" For default vim omni completion, use <C-x><C-o>
"inoremap <C-@> <C-F><C-F>
inoremap <S-Tab> <C-X><C-F>
let Tlist_WinWidth=50
set backspace=indent,eol,start
set ofu=syntaxcomplete#Complete
set completeopt=longest,menuone
"set gfn=Monaco:h12
highlight SpellBad ctermbg=Gray
set noerrorbells
map <silent> <F10> :set invnumber<cr>

set history=50
set ignorecase
set smartcase
set pastetoggle=<F11>
set wildmenu
set wildmode=list:longest,full
set noeb vb t_vb=
augroup filetypedetect
    au BufNewFile,BufRead *.pig set filetype=pig syntax=pig
augroup END
set colorcolumn=80
set tw=80
set hidden " switch bufferes without having to save

" command to highlight unsaved lines
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
              \ | wincmd p | diffthis
endif

" Auto highlight word under cursor
" https://stackoverflow.com/questions/1551231/highlight-variable-under-cursor-in-vim-like-in-netbeans
autocmd CursorMoved * exe exists("HlUnderCursor")?HlUnderCursor?printf('match DiffAdd /\V\<%s\>/', escape(expand('<cword>'), '/\')):'match none':""
nnoremap <silent> <F3> :exe "let HlUnderCursor=exists(\"HlUnderCursor\")?HlUnderCursor*-1+1:1"<CR>

" Auto change working directory to the current file
" https://vim.fandom.com/wiki/Set_working_directory_to_the_current_file
" 'cd' towards the directory in which the current file is edited
" but only change the path for the current window
" ref: https://vimways.org/2019/vim-and-the-working-directory/
nnoremap <leader>cd :lcd %:h:p
autocmd BufEnter * silent! lcd %:p:h


if has('gui_running')
    set guifont=Ubuntu\ Mono\ 12
endif

" ============================================================================
" Plugin settings
" Airlines
"
let g:airline_theme = 'light'
" Don't show the tabline bufferlist
" let g:airline#extensions#tabline#enabled = 1
" Show just the filename
" let g:airline#extensions#tabline#fnamemod = ':t'
" Show buffers
" let g:airline#extensions#tabline#show_buffers = 1
" Show bufferline
let g:airline#extensions#bufferline#enabled = 1
let g:airline#extensions#bufferline#overwrite_variables = 1

" Extension
let g:airline_section_x = ''
let g:airline_section_y = ''

" ===========
" IndentLine
"
let g:indentLine_setColors = 0
let g:indentLine_char = '|'

" ===========
" Python-Syntax
"
let python_highlight_all = 1

" PaperColor
" To highlight builtin functions, removed if vim starts lagging
let g:PaperColor_Theme_Options = {
  \   'language': {
  \     'python': {
  \       'highlight_builtins' : 1
  \     },
  \     'cpp': {
  \       'highlight_standard_library': 1
  \     },
  \     'c': {
  \       'highlight_builtins' : 1
  \     }
  \   }
  \ }

let g:PaperColor_Theme_Options = {
  \   'theme': {
  \     'default.light': {
  \       'override' : {
  \         'color00' : ['#080808', '232'],
  \         'linenumber_bg' : ['#080808', '232']
  \       }
  \     }
  \   }
  \ }



"
" ===========
" Syntastic
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['pyflakes']

" close the error together with the open buffer
nnoremap <silent> <C-d> :lclose<CR>:bdelete<CR>
cabbrev <silent> bd <C-r>=(getcmdtype()==#':' && getcmdpos()==1 ? 'lclose\|bdelete' : 'bd')<CR>

" disable style message
" let g:syntastic_quiet_messages = { "type": "style" }


" " ===========
" " Neocomplete
" " Disable AutoComplPop.
" let g:acp_enableAtStartup = 1
" " Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" " Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" " Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3
"
" " Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
"     \ 'default' : '',
"     \ 'vimshell' : $HOME.'/.vimshell_hist',
"     \ 'scheme' : $HOME.'/.gosh_completions'
"         \ }
"
" " Define keyword.
" if !exists('g:neocomplete#keyword_patterns')
"     let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" " Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
"   return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
"   " For no inserting <CR> key.
"   "return pumvisible() ? "\<C-y>" : "\<CR>"
" endfunction
" " <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" " Close popup by <Space>.
" "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
"
" " AutoComplPop like behavior.
" "let g:neocomplete#enable_auto_select = 1
"
" " Shell like behavior(not recommended).
" "set completeopt+=longest
" "let g:neocomplete#enable_auto_select = 1
" "let g:neocomplete#disable_auto_complete = 1
" "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"
"
" " Enable omni completion.  " autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"
" " Enable heavy omni completion.
" if !exists('g:neocomplete#sources#omni#input_patterns')
"   let g:neocomplete#sources#omni#input_patterns = {}
" endif
" "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
" "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
"
" " For perlomni.vim setting.
" " https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
"
" =================
" NERDTree

" Open NERDTree automatically upon vim startup
" autocmd vimenter * NERDTree

" Open NERDTree automatically upon vim startup IF no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Open NERDTree automatically when vim starts up on opening a directory?
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Map a Ctrl-n to open NERDTree
map <C-n> :NERDTreeToggle<CR>

" Close vim if the only window left open is a NERDTree
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif"

" Show hidden file
let NERDTreeShowHidden=1

" ===================
" NERDTree syntax highlight
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1

:let g:NERDTreeWinSize=20
let g:NERDTreeShowLineNumbers = 0


" ======================
" vimtex
let g:tex_flavor = 'latex'

" " =====================
" " FastFold
" nmap zuz <Plug>(FastFoldUpdate)
" let g:fastfold_savehook = 1
" let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
" let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
" let g:markdown_folding = 1
" let g:tex_fold_enabled = 1
" let g:vimsyn_folding = 'af'
" let g:xml_syntax_folding = 1
" let g:javaScript_fold = 1
" let g:sh_fold_enabled= 7
" let g:ruby_fold = 1
" let g:perl_fold = 1
" let g:perl_fold_blocks = 1
" let g:r_syntax_folding = 1
" let g:rust_fold = 1
" let g:php_folding = 1

" " ===================
" " SimpylFold
" let g:SimpylFold_docstring_preview = 1
"
" ===================
" tidying :ls
" https://vi.stackexchange.com/questions/4102/how-to-shorten-the-result-of-ls-to-get-only-the-file-name-and-not-the-whole-pa
function! s:MyBufList()
  set nomore
  let buf_count = bufnr("$")
  for i in range(1, buf_count)
    if getbufvar(l:i, '&buflisted') > 0
      let path = bufname(i)
      let filename = fnamemodify(path, ":t")
      let folder = fnamemodify(path, ":h")
      echo i "|" filename . "\t(" . folder . ")"
    endif
  endfor
  set more
endfunction

function! ListBuffers()
    redir => ls_output
    silent exec 'ls'
    redir END

    let list = substitute(ls_output, '"(\f*\ )*(\f*)"' , '\=submatch(2)',    "g")

    echo list
endfunction

command! MBL call s:MyBufList()
command! LB call ListBuffers()

nmap <silent> <Leader>b :MBL<CR>:call feedkeys(':b ')<CR>

" https://stackoverflow.com/questions/6778961/alt-key-shortcuts-not-working-on-gnome-terminal-with-vim
let c='a'
while c <= 'z'
  exec "set <A-".c.">=\e".c
  exec "imap \e".c." <A-".c.">"
  let c = nr2char(1+char2nr(c))
endw

set timeout ttimeoutlen=50
